// Generated by CoffeeScript 1.3.3
(function() {

  window.addEvent('domready', function() {
    var Dimension, DimensionCollectionView, DimensionView, Host, HostCollection, Metric, MetricCollection, button, hosts, hostsContainer, hostsView, metrics, metricsContainer, metricsView;
    Dimension = Backbone.Model.extend({
      defaults: {
        checked: false,
        display: true
      }
    });
    Host = Dimension.extend({});
    Metric = Dimension.extend({});
    HostCollection = Backbone.Collection.extend({
      url: '/data',
      model: Host,
      parse: function(response) {
        var attrs;
        return attrs = response.hosts.map(function(host) {
          return {
            id: host
          };
        });
      },
      filter: function(term) {
        return this.each(function(item) {
          var match;
          try {
            match = !!item.get('id').match(term);
          } catch (error) {
            if (error.type !== 'malformed_regexp') {
              throw error;
            }
          }
          return item.set('display', match);
        });
      }
    });
    MetricCollection = Backbone.Collection.extend({
      url: '/data/*',
      model: Metric,
      parse: function(response) {
        var attrs;
        attrs = response.metrics.map(function(metric) {
          return {
            id: metric
          };
        });
        return _.sortBy(attrs, function(attr) {
          return attr.id;
        });
      },
      filter: function(term) {
        return this.each(function(item) {
          var match;
          match = !!item.get('id').match(term);
          return item.set('display', match);
        });
      }
    });
    DimensionView = Backbone.View.extend({
      tagName: 'li',
      className: 'row',
      render: function() {
        var checkbox, id, label, name, that;
        that = this;
        id = name = this.model.id;
        checkbox = new Element('input', {
          'type': 'checkbox',
          'id': id,
          'class': "" + name + " checkbox",
          'checked': this.model.get('checked'),
          'events': {
            'change': function(event) {
              return that.model.set('checked', !that.model.get('checked'));
            }
          }
        });
        label = new Element('label', {
          'for': id,
          'html': id,
          'class': "" + name + " label"
        });
        $(this.el).grab(checkbox);
        $(this.el).grab(label);
        return $(this.el).addEvent('click', function(event) {
          if (event.target.tagName.toLowerCase() === 'li') {
            checkbox = event.target.getElement('input.checkbox');
            if (checkbox) {
              checkbox.checked = !checkbox.checked;
            }
            return that.model.set('checked', !that.model.get('checked'));
          }
        });
      }
    });
    DimensionCollectionView = Backbone.View.extend({
      tagName: 'ul',
      className: 'dimensioncollection',
      initialize: function() {
        var container, icon, paper, search, that;
        that = this;
        container = $(that.options.container);
        icon = new Element('div', {
          'class': 'clear',
          'events': {
            'click': function(event) {
              var input, list, term;
              term = '';
              input = event.target.getParent('div.dimension').getElement('input.search');
              input.set('value', term);
              that.collection.filter(term);
              list = that.render().el;
              container.grab(list);
              icon = event.target.getParent('div.dimension').getElement('div.clear');
              return icon.setStyle('display', 'none');
            }
          }
        });
        paper = Raphael(icon, 26, 26);
        paper.path("M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z").attr({
          fill: "#aaa",
          stroke: "none"
        });
        search = new Element('input', {
          'type': 'text',
          'class': 'search',
          'autocomplete': 'off',
          'events': {
            'keyup': function(event) {
              var input, list, term;
              input = event.target;
              term = input.value;
              that.collection.filter(term);
              list = that.render().el;
              container.grab(list);
              if (term.length > 0) {
                return icon.setStyle('display', 'inline');
              } else {
                return icon.setStyle('display', 'none');
              }
            }
          }
        });
        container.grab(search);
        return container.grab(icon);
      },
      render: function() {
        var message, number_of_results, selectAll, that;
        that = this;
        that.el.empty();
        that.collection.each(function(model) {
          var view;
          view = new DimensionView({
            model: model
          });
          if (model.get('display')) {
            return that.el.grab(view.render());
          }
        });
        number_of_results = that.el.getChildren().length;
        if (number_of_results === 0) {
          message = new Element('li', {
            'html': 'No matches',
            'class': 'row'
          });
          that.el.grab(message);
        } else {
          selectAll = new Element('li', {
            'html': '&uarr; toggle all',
            'class': 'row toggle',
            'events': {
              'click': function(event) {
                var checkboxes;
                checkboxes = that.el.getElements('input.checkbox');
                return checkboxes.each(function(element) {
                  element.fireEvent('change');
                  return element.setProperty('checked', !element.getProperty('checked'));
                });
              }
            }
          });
          that.el.grab(selectAll);
        }
        return that;
      }
    });
    hostsContainer = $('hosts');
    hosts = new HostCollection;
    hostsView = new DimensionCollectionView({
      collection: hosts,
      container: hostsContainer
    });
    hosts.fetch({
      success: function(collection) {
        var list;
        list = hostsView.render().el;
        return hostsContainer.grab(list);
      }
    });
    metricsContainer = $('metrics');
    metrics = new MetricCollection;
    metricsView = new DimensionCollectionView({
      collection: metrics,
      container: metricsContainer
    });
    metrics.fetch({
      success: function(collection) {
        var list;
        list = metricsView.render().el;
        return metricsContainer.grab(list);
      }
    });
    button = new Element('input', {
      'type': 'button',
      'value': 'Show graphs',
      'class': 'button',
      'styles': {
        'font-size': '80%',
        'padding': '4px 8px'
      },
      'events': {
        'click': function(event) {
          console.log('hosts', hosts, hosts.where({
            checked: true
          }));
          return console.log('metrics', metrics, metrics.where({
            checked: true
          }));
        }
      }
    });
    return $('display').grab(button);
  });

}).call(this);

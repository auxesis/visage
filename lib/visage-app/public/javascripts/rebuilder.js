// Generated by CoffeeScript 1.3.3
(function() {

  window.addEvent('domready', function() {
    var Dimension, DimensionCollectionView, DimensionView, Graph, GraphCollection, GraphCollectionView, GraphView, Host, HostCollection, Metric, MetricCollection, button, graphs, graphsContainer, graphsView, hosts, hostsContainer, hostsView, metrics, metricsContainer, metricsView;
    Dimension = Backbone.Model.extend({
      defaults: {
        checked: false,
        display: true
      }
    });
    Host = Dimension.extend({});
    Metric = Dimension.extend({});
    Graph = Backbone.Model.extend({
      url: function() {
        var finish, host, plugin, query, start;
        host = this.get('host');
        plugin = this.get('plugin');
        start = this.get('start');
        finish = this.get('finish');
        query = {};
        if (this.get('start')) {
          query.start = this.get('start');
        }
        if (this.get('finish')) {
          query.finish = this.get('finish');
        }
        query = query.length > 0 ? '?' + Object.toQueryString(query) : '';
        return "/data/" + host + "/" + plugin + query;
      },
      parse: function(response) {
        var data, host, obj, plugin, that;
        host = this.get('host');
        plugin = this.get('plugin');
        data = response;
        that = this;
        obj = {};
        obj.data = data;
        obj.series = [];
        Object.each(data[host][plugin], function(instance, instanceName) {
          return Object.each(instance, function(metric, metricName) {
            var finish, interval, set, start;
            start = metric.start;
            finish = metric.finish;
            interval = (finish - start) / metric.data.length;
            data = metric.data.map(function(value, index) {
              var x, y;
              x = (start + index * interval) * 1000;
              y = value;
              return [x, y];
            });
            set = {
              name: [host, plugin, instanceName, metricName],
              data: data,
              percentile95: metric.percentile_95
            };
            return obj.series.push(set);
          });
        });
        obj.series = obj.series.sort(function(a, b) {
          if (a.name[2] < b.name[2]) {
            return -1;
          }
          if (a.name[2] > b.name[2]) {
            return 1;
          }
          return 0;
        });
        return obj;
      }
    });
    HostCollection = Backbone.Collection.extend({
      url: '/data',
      model: Host,
      parse: function(response) {
        var attrs;
        return attrs = response.hosts.map(function(host) {
          return {
            id: host
          };
        });
      },
      filter: function(term) {
        return this.each(function(item) {
          var match;
          try {
            match = !!item.get('id').match(term);
          } catch (error) {
            if (error.type !== 'malformed_regexp') {
              throw error;
            }
          }
          return item.set('display', match);
        });
      },
      selected: function() {
        return this.models.filter(function(model) {
          return model.get('checked') === true;
        });
      }
    });
    MetricCollection = Backbone.Collection.extend({
      url: '/data/*',
      model: Metric,
      parse: function(response) {
        var attrs;
        attrs = response.metrics.map(function(metric) {
          return {
            id: metric
          };
        });
        return _.sortBy(attrs, function(attr) {
          return attr.id;
        });
      },
      filter: function(term) {
        return this.each(function(item) {
          var match;
          try {
            match = !!item.get('id').match(term);
          } catch (error) {
            if (error.type !== 'malformed_regexp') {
              throw error;
            }
          }
          return item.set('display', match);
        });
      },
      selected: function() {
        return this.models.filter(function(model) {
          return model.get('checked') === true;
        });
      }
    });
    GraphCollection = Backbone.Collection.extend({
      model: Graph
    });
    DimensionView = Backbone.View.extend({
      tagName: 'li',
      className: 'row',
      render: function() {
        var checkbox, id, label, name, that;
        that = this;
        id = name = this.model.id;
        checkbox = new Element('input', {
          'type': 'checkbox',
          'id': id,
          'class': "" + name + " checkbox",
          'checked': this.model.get('checked'),
          'events': {
            'change': function(event) {
              return that.model.set('checked', !that.model.get('checked'));
            }
          }
        });
        label = new Element('label', {
          'for': id,
          'html': id,
          'class': "" + name + " label"
        });
        $(this.el).grab(checkbox);
        $(this.el).grab(label);
        return $(this.el).addEvent('click', function(event) {
          if (event.target.tagName.toLowerCase() === 'li') {
            checkbox = event.target.getElement('input.checkbox');
            if (checkbox) {
              checkbox.checked = !checkbox.checked;
            }
            return that.model.set('checked', !that.model.get('checked'));
          }
        });
      }
    });
    DimensionCollectionView = Backbone.View.extend({
      tagName: 'ul',
      className: 'dimensioncollection',
      initialize: function() {
        var container, icon, paper, search, that;
        that = this;
        container = $(that.options.container);
        icon = new Element('div', {
          'class': 'clear',
          'events': {
            'click': function(event) {
              var input, list, term;
              term = '';
              input = event.target.getParent('div.dimension').getElement('input.search');
              input.set('value', term);
              that.collection.filter(term);
              list = that.render().el;
              container.grab(list);
              icon = event.target.getParent('div.dimension').getElement('div.clear');
              return icon.setStyle('display', 'none');
            }
          }
        });
        paper = Raphael(icon, 26, 26);
        paper.path("M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z").attr({
          fill: "#aaa",
          stroke: "none"
        });
        search = new Element('input', {
          'type': 'text',
          'class': 'search',
          'autocomplete': 'off',
          'events': {
            'keyup': function(event) {
              var input, list, term;
              input = event.target;
              term = input.value;
              that.collection.filter(term);
              list = that.render().el;
              container.grab(list);
              if (term.length > 0) {
                return icon.setStyle('display', 'inline');
              } else {
                return icon.setStyle('display', 'none');
              }
            }
          }
        });
        container.grab(search);
        return container.grab(icon);
      },
      render: function() {
        var message, number_of_results, selectAll, that;
        that = this;
        that.el.empty();
        that.collection.each(function(model) {
          var view;
          view = new DimensionView({
            model: model
          });
          if (model.get('display')) {
            return that.el.grab(view.render());
          }
        });
        number_of_results = that.el.getChildren().length;
        if (number_of_results === 0) {
          message = new Element('li', {
            'html': 'No matches',
            'class': 'row'
          });
          that.el.grab(message);
        } else {
          selectAll = new Element('li', {
            'html': '&uarr; toggle all',
            'class': 'row toggle',
            'events': {
              'click': function(event) {
                var checkboxes;
                checkboxes = that.el.getElements('input.checkbox');
                return checkboxes.each(function(element) {
                  element.fireEvent('change');
                  return element.setProperty('checked', !element.getProperty('checked'));
                });
              }
            }
          });
          that.el.grab(selectAll);
        }
        return that;
      }
    });
    GraphView = Backbone.View.extend({
      tagName: 'div',
      className: 'graph',
      title: function() {
        var host, plugin, that;
        that = this;
        plugin = that.model.get('plugin');
        host = that.model.get('host');
        if (that.options.title) {
          return that.options.title;
        } else {
          if (plugin.match(/^curl_json/)) {
            plugin = plugin.split('-')[1].replace(/(-|_)/, ' ');
          }
          return [plugin, 'on', host].join(' ');
        }
      },
      seriesMinMax: function() {
        var endpoints, max, min, series, that;
        that = this;
        series = that.model.get('series');
        endpoints = series.map(function(set) {
          var max, min, values;
          values = set.data.map(function(point) {
            return point[1];
          });
          min = values.min();
          max = values.max();
          return [min, max];
        });
        min = endpoints.map(function(min, max) {
          return min;
        }).min();
        max = endpoints.map(function(min, max) {
          return max;
        }).max();
        return [min, max];
      },
      render: function() {
        var destroy, element, max, min, paper, series, that, title, _ref;
        that = this;
        element = that.el;
        series = that.model.get('series');
        title = that.title();
        _ref = that.seriesMinMax(), min = _ref[0], max = _ref[1];
        element.setStyle('height', 0);
        that.chart = new Highcharts.Chart({
          series: series,
          chart: {
            renderTo: element,
            type: 'line',
            marginRight: 0,
            marginBottom: 60,
            zoomType: 'xy',
            resetZoomButton: {
              theme: {
                fill: 'white',
                stroke: '#020508',
                r: 0,
                states: {
                  hover: {
                    fill: '#020508',
                    style: {
                      color: 'white'
                    }
                  }
                }
              }
            },
            width: 873,
            height: 350,
            plotBorderWidth: 1,
            plotBorderColor: '#020508',
            events: {}
          },
          title: {
            text: title,
            style: {
              'fontSize': '18px',
              'fontWeight': 'bold',
              'color': '#333333',
              'font-family': 'Bitstream Vera Sans, Helvetica Neue, sans-serif'
            }
          },
          colors: ['#1F78B4', '#33A02C', '#E31A1C', '#FF7F00', '#6A3D9A', '#A6CEE3', '#B2DF8A', '#FB9A99', '#FDBF6F', '#CAB2D6', '#FFFF99'],
          xAxis: {
            lineWidth: 0,
            minPadding: 0.012,
            maxPadding: 0.012,
            tickLength: 5,
            tickColor: "#020508",
            startOnTick: false,
            endOnTick: false,
            gridLineWidth: 0,
            tickPixelInterval: 150,
            labels: {
              style: {
                color: '#000'
              }
            },
            title: {
              text: null
            },
            type: 'datetime',
            dateTimeLabelFormats: {
              second: '%H:%M:%S',
              minute: '%H:%M',
              hour: '%H:%M',
              day: '%d/%m',
              week: '%d/%m',
              month: '%m/%Y',
              year: '%Y'
            }
          },
          yAxis: {
            lineWidth: 0,
            minPadding: 0.05,
            maxPadding: 0.05,
            tickWidth: 1,
            tickColor: '#020508',
            startOnTick: false,
            endOnTick: false,
            gridLineWidth: 0,
            title: {
              text: null
            },
            labels: {
              style: {
                color: '#000'
              },
              formatter: function() {
                var precision, value;
                precision = 1;
                return value = formatValue(this.value, {
                  'precision': precision,
                  'min': min,
                  'max': max
                });
              }
            }
          },
          plotOptions: {
            series: {
              shadow: false,
              lineWidth: 1,
              marker: {
                enabled: false,
                states: {
                  hover: {
                    enabled: true,
                    radius: 4
                  }
                }
              },
              states: {
                hover: {
                  enabled: true,
                  lineWidth: 1
                }
              }
            }
          },
          tooltip: {
            formatter: function() {
              var tip;
              tip = '<strong>';
              tip += formatSeriesLabel(this.series.name).trim();
              tip += '</strong>' + ' -> ';
              tip += '<span style="font-family: monospace; font-size: 14px;">';
              tip += formatValue(this.y, {
                'precision': 2,
                'min': min,
                'max': max
              });
              tip += '<span style="font-size: 9px; color: #777">';
              tip += ' (' + this.y + ')';
              tip += '</span>';
              tip += '</span>';
              tip += '<br/>';
              tip += '<span style="font-family: monospace">';
              tip += formatDate(this.x);
              tip += '</span>';
              return tip;
            }
          },
          legend: {
            layout: 'horizontal',
            align: 'center',
            verticalAlign: 'top',
            y: 320,
            borderWidth: 0,
            floating: true,
            labelFormatter: function() {
              return formatSeriesLabel(this.name);
            },
            itemStyle: {
              cursor: 'pointer',
              color: '#1a1a1a'
            },
            itemHoverStyle: {
              color: '#111'
            }
          },
          credits: {
            enabled: false
          }
        });
        destroy = new Element('div', {
          'class': 'action',
          'styles': {
            opacity: 0
          },
          'events': {
            'click': function(event) {
              return that.el.fade('out').get('tween').chain(function() {
                return that.el.tween('height', '0').get('tween').chain(function() {
                  console.log('destroy');
                  that.chart.destroy();
                  that.el.destroy();
                  that.model.collection.remove(that.model);
                  return that.model.destroy();
                });
              });
            }
          }
        });
        paper = Raphael(destroy, 26, 26);
        paper.path("M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z").attr({
          fill: "#aaa",
          stroke: "none"
        });
        element.grab(destroy, 'top');
        element.tween('height', 376);
        element.addEvent('mouseenter', function() {
          return destroy.tween('opacity', 1);
        });
        element.addEvent('mouseleave', function() {
          return destroy.tween('opacity', 0);
        });
        return element;
      }
    });
    GraphCollectionView = Backbone.View.extend({
      tagName: 'div',
      className: 'graph',
      render: function() {
        var that;
        that = this;
        that.collection.each(function(model) {
          var graph, view;
          if (!model.get('rendered')) {
            view = new GraphView({
              model: model
            });
            graph = view.render();
            that.el.grab(graph);
            return model.set('rendered', true);
          }
        });
        return that;
      }
    });
    hostsContainer = $('hosts');
    hosts = new HostCollection;
    hostsView = new DimensionCollectionView({
      collection: hosts,
      container: hostsContainer
    });
    hosts.fetch({
      success: function(collection) {
        var list;
        list = hostsView.render().el;
        return hostsContainer.grab(list);
      }
    });
    metricsContainer = $('metrics');
    metrics = new MetricCollection;
    metricsView = new DimensionCollectionView({
      collection: metrics,
      container: metricsContainer
    });
    metrics.fetch({
      success: function(collection) {
        var list;
        list = metricsView.render().el;
        return metricsContainer.grab(list);
      }
    });
    graphsContainer = $('graphs');
    graphs = new GraphCollection;
    graphsView = new GraphCollectionView({
      el: graphsContainer,
      collection: graphs
    });
    button = new Element('input', {
      'type': 'button',
      'value': 'Show graphs',
      'class': 'button',
      'styles': {
        'font-size': '80%',
        'padding': '4px 8px'
      },
      'events': {
        'click': function(event) {
          var selected_hosts, selected_plugins;
          selected_plugins = metrics.selected().map(function(metric) {
            return metric.get('id').split('/')[0];
          }).unique();
          selected_hosts = hosts.selected().map(function(host) {
            return host.get('id');
          }).unique();
          return selected_hosts.each(function(host) {
            return selected_plugins.each(function(plugin) {
              var attributes, graph;
              attributes = {
                host: host,
                plugin: plugin
              };
              graph = new Graph(attributes);
              return graph.fetch({
                success: function(model, response) {
                  graphs.add(graph);
                  return graphsView.render().el;
                }
              });
            });
          });
        }
      }
    });
    return $('display').grab(button);
  });

}).call(this);

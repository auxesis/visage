// Generated by CoffeeScript 1.3.3
(function() {

  window.addEvent('domready', function() {
    var Dimension, DimensionCollectionView, DimensionView, Graph, GraphCollection, GraphCollectionView, GraphView, Host, HostCollection, Metric, MetricCollection, Timeframe, TimeframeCollection, TimeframeCollectionView, TimeframeView, button, graphs, graphsContainer, graphsView, hosts, hostsContainer, hostsView, metrics, metricsContainer, metricsView, timeframes, timeframesView;
    Dimension = Backbone.Model.extend({
      defaults: {
        checked: false,
        display: true
      }
    });
    Host = Dimension.extend({});
    Metric = Dimension.extend({});
    Graph = Backbone.Model.extend({
      url: function() {
        var finish, host, plugin, query, start;
        host = this.get('host');
        plugin = this.get('plugin');
        start = this.get('start');
        finish = this.get('finish');
        query = {};
        if (start) {
          query.start = start;
        }
        if (finish) {
          query.finish = finish;
        }
        query = Object.getLength(query) > 0 ? '?' + Object.toQueryString(query) : '';
        return "/data/" + host + "/" + plugin + query;
      },
      parse: function(response) {
        var data, host, obj, plugin, that;
        host = this.get('host');
        plugin = this.get('plugin');
        data = response;
        that = this;
        obj = {};
        obj.data = data;
        obj.series = [];
        Object.each(data[host][plugin], function(instance, instanceName) {
          return Object.each(instance, function(metric, metricName) {
            var finish, interval, set, start;
            start = metric.start;
            finish = metric.finish;
            interval = (finish - start) / metric.data.length;
            data = metric.data.map(function(value, index) {
              var x, y;
              x = (start + index * interval) * 1000;
              y = value;
              return [x, y];
            });
            set = {
              name: [host, plugin, instanceName, metricName],
              data: data,
              percentile95: metric.percentile_95
            };
            return obj.series.push(set);
          });
        });
        obj.series = obj.series.sort(function(a, b) {
          if (a.name[2] < b.name[2]) {
            return -1;
          }
          if (a.name[2] > b.name[2]) {
            return 1;
          }
          return 0;
        });
        return obj;
      }
    });
    Timeframe = Backbone.Model.extend({
      currentUnixTime: function() {
        var date;
        date = new Date;
        return parseInt(date.getTime() / 1000);
      },
      relativeUnixTimeTo: function(value) {
        var that;
        that = this;
        return that.currentUnixTime() - (Math.abs(value) * 3600);
      },
      roundedUnixTimeTo: function(value) {
        if (value < 0) {
          return new Date().decrement('month', Math.abs(value)).set('date', 1).clearTime().getTime() / 1000;
        }
        if (value > 0) {
          return new Date().increment('month', value).set('date', 1).clearTime().getTime() / 1000;
        }
        return new Date().set('date', 1).clearTime().getTime() / 1000;
      },
      toTimeAttributes: function() {
        var attrs, finish, start, that, unit;
        that = this;
        unit = that.get('unit');
        start = that.get('start');
        finish = that.get('finish');
        attrs = {};
        if (unit === 'hours') {
          if (start) {
            attrs.start = that.relativeUnixTimeTo(start);
          }
          if (finish) {
            attrs.finish = that.relativeUnixTimeTo(finish);
          }
        } else if (unit === 'months') {
          if (start) {
            attrs.start = that.relativeUnixTimeTo(start);
          }
          if (finish) {
            attrs.finish = that.relativeUnixTimeTo(finish);
          }
        }
        return attrs;
      }
    });
    HostCollection = Backbone.Collection.extend({
      url: '/data',
      model: Host,
      parse: function(response) {
        var attrs;
        return attrs = response.hosts.map(function(host) {
          return {
            id: host
          };
        });
      },
      filter: function(term) {
        return this.each(function(item) {
          var match;
          try {
            match = !!item.get('id').match(term);
          } catch (error) {
            if (error.type !== 'malformed_regexp') {
              throw error;
            }
          }
          return item.set('display', match);
        });
      },
      selected: function() {
        return this.models.filter(function(model) {
          return model.get('checked') === true;
        });
      }
    });
    MetricCollection = Backbone.Collection.extend({
      url: '/data/*',
      model: Metric,
      parse: function(response) {
        var attrs;
        attrs = response.metrics.map(function(metric) {
          return {
            id: metric
          };
        });
        return _.sortBy(attrs, function(attr) {
          return attr.id;
        });
      },
      filter: function(term) {
        return this.each(function(item) {
          var match;
          try {
            match = !!item.get('id').match(term);
          } catch (error) {
            if (error.type !== 'malformed_regexp') {
              throw error;
            }
          }
          return item.set('display', match);
        });
      },
      selected: function() {
        return this.models.filter(function(model) {
          return model.get('checked') === true;
        });
      }
    });
    GraphCollection = Backbone.Collection.extend({
      model: Graph
    });
    TimeframeCollection = Backbone.Collection.extend({
      model: Timeframe
    });
    DimensionView = Backbone.View.extend({
      tagName: 'li',
      className: 'row',
      render: function() {
        var checkbox, id, label, name, that;
        that = this;
        id = name = this.model.id;
        checkbox = new Element('input', {
          'type': 'checkbox',
          'id': id,
          'class': "" + name + " checkbox",
          'checked': this.model.get('checked'),
          'events': {
            'change': function(event) {
              return that.model.set('checked', !that.model.get('checked'));
            }
          }
        });
        label = new Element('label', {
          'for': id,
          'html': id,
          'class': "" + name + " label"
        });
        $(this.el).grab(checkbox);
        $(this.el).grab(label);
        return $(this.el).addEvent('click', function(event) {
          if (event.target.tagName.toLowerCase() === 'li') {
            checkbox = event.target.getElement('input.checkbox');
            if (checkbox) {
              checkbox.checked = !checkbox.checked;
            }
            return that.model.set('checked', !that.model.get('checked'));
          }
        });
      }
    });
    DimensionCollectionView = Backbone.View.extend({
      tagName: 'ul',
      className: 'dimensioncollection',
      initialize: function() {
        var container, icon, paper, search, that;
        that = this;
        container = $(that.options.container);
        icon = new Element('div', {
          'class': 'clear',
          'events': {
            'click': function(event) {
              var input, list, term;
              term = '';
              input = event.target.getParent('div.dimension').getElement('input.search');
              input.set('value', term);
              that.collection.filter(term);
              list = that.render().el;
              container.grab(list);
              icon = event.target.getParent('div.dimension').getElement('div.clear');
              return icon.setStyle('display', 'none');
            }
          }
        });
        paper = Raphael(icon, 26, 26);
        paper.path("M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z").attr({
          fill: "#aaa",
          stroke: "none"
        });
        search = new Element('input', {
          'type': 'text',
          'class': 'search',
          'autocomplete': 'off',
          'events': {
            'keyup': function(event) {
              var input, list, term;
              input = event.target;
              term = input.value;
              that.collection.filter(term);
              list = that.render().el;
              container.grab(list);
              if (term.length > 0) {
                return icon.setStyle('display', 'inline');
              } else {
                return icon.setStyle('display', 'none');
              }
            }
          }
        });
        container.grab(search);
        return container.grab(icon);
      },
      render: function() {
        var message, number_of_results, selectAll, that;
        that = this;
        that.el.empty();
        that.collection.each(function(model) {
          var view;
          view = new DimensionView({
            model: model
          });
          if (model.get('display')) {
            return that.el.grab(view.render());
          }
        });
        number_of_results = that.el.getChildren().length;
        if (number_of_results === 0) {
          message = new Element('li', {
            'html': 'No matches',
            'class': 'row'
          });
          that.el.grab(message);
        } else {
          selectAll = new Element('li', {
            'html': '&uarr; toggle all',
            'class': 'row toggle',
            'events': {
              'click': function(event) {
                var checkboxes;
                checkboxes = that.el.getElements('input.checkbox');
                return checkboxes.each(function(element) {
                  element.fireEvent('change');
                  return element.setProperty('checked', !element.getProperty('checked'));
                });
              }
            }
          });
          that.el.grab(selectAll);
        }
        return that;
      }
    });
    GraphView = Backbone.View.extend({
      tagName: 'li',
      className: 'graph',
      title: function() {
        var host, plugin, that;
        that = this;
        plugin = that.model.get('plugin');
        host = that.model.get('host');
        if (that.options.title) {
          return that.options.title;
        } else {
          if (plugin.match(/^curl_json/)) {
            plugin = plugin.split('-')[1].replace(/(-|_)/, ' ');
          }
          return [plugin, 'on', host].join(' ');
        }
      },
      seriesMinMax: function() {
        var endpoints, max, min, series, that;
        that = this;
        series = that.model.get('series');
        endpoints = series.map(function(set) {
          var max, min, values;
          values = set.data.map(function(point) {
            return point[1];
          });
          min = values.min();
          max = values.max();
          return [min, max];
        });
        min = endpoints.map(function(min, max) {
          return min;
        }).min();
        max = endpoints.map(function(min, max) {
          return max;
        }).max();
        return [min, max];
      },
      render: function() {
        var destroy, destroyPaper, element, max, min, move, movePaper, series, that, title, _ref;
        that = this;
        element = that.el;
        series = that.model.get('series');
        title = that.title();
        _ref = that.seriesMinMax(), min = _ref[0], max = _ref[1];
        element.setStyle('height', 0);
        that.chart = new Highcharts.Chart({
          series: series,
          chart: {
            renderTo: element,
            type: 'line',
            marginRight: 0,
            marginBottom: 60,
            zoomType: 'xy',
            resetZoomButton: {
              theme: {
                fill: 'white',
                stroke: '#020508',
                r: 0,
                states: {
                  hover: {
                    fill: '#020508',
                    style: {
                      color: 'white'
                    }
                  }
                }
              }
            },
            width: 873,
            height: 350,
            plotBorderWidth: 1,
            plotBorderColor: '#020508',
            events: {}
          },
          title: {
            text: title,
            style: {
              'fontSize': '18px',
              'fontWeight': 'bold',
              'color': '#333333',
              'font-family': 'Bitstream Vera Sans, Helvetica Neue, sans-serif'
            }
          },
          colors: ['#1F78B4', '#33A02C', '#E31A1C', '#FF7F00', '#6A3D9A', '#A6CEE3', '#B2DF8A', '#FB9A99', '#FDBF6F', '#CAB2D6', '#FFFF99'],
          xAxis: {
            lineWidth: 0,
            minPadding: 0.012,
            maxPadding: 0.012,
            tickLength: 5,
            tickColor: "#020508",
            startOnTick: false,
            endOnTick: false,
            gridLineWidth: 0,
            tickPixelInterval: 150,
            labels: {
              style: {
                color: '#000'
              }
            },
            title: {
              text: null
            },
            type: 'datetime',
            dateTimeLabelFormats: {
              second: '%H:%M:%S',
              minute: '%H:%M',
              hour: '%H:%M',
              day: '%d/%m',
              week: '%d/%m',
              month: '%m/%Y',
              year: '%Y'
            }
          },
          yAxis: {
            lineWidth: 0,
            minPadding: 0.05,
            maxPadding: 0.05,
            tickWidth: 1,
            tickColor: '#020508',
            startOnTick: false,
            endOnTick: false,
            gridLineWidth: 0,
            title: {
              text: null
            },
            labels: {
              style: {
                color: '#000'
              },
              formatter: function() {
                var precision, value;
                precision = 1;
                return value = formatValue(this.value, {
                  'precision': precision,
                  'min': min,
                  'max': max
                });
              }
            }
          },
          plotOptions: {
            series: {
              shadow: false,
              lineWidth: 1,
              marker: {
                enabled: false,
                states: {
                  hover: {
                    enabled: true,
                    radius: 4
                  }
                }
              },
              states: {
                hover: {
                  enabled: true,
                  lineWidth: 1
                }
              }
            }
          },
          tooltip: {
            formatter: function() {
              var tip;
              tip = '<strong>';
              tip += formatSeriesLabel(this.series.name).trim();
              tip += '</strong>' + ' -> ';
              tip += '<span style="font-family: monospace; font-size: 14px;">';
              tip += formatValue(this.y, {
                'precision': 2,
                'min': min,
                'max': max
              });
              tip += '<span style="font-size: 9px; color: #777">';
              tip += ' (' + this.y + ')';
              tip += '</span>';
              tip += '</span>';
              tip += '<br/>';
              tip += '<span style="font-family: monospace">';
              tip += formatDate(this.x);
              tip += '</span>';
              return tip;
            }
          },
          legend: {
            layout: 'horizontal',
            align: 'center',
            verticalAlign: 'top',
            y: 320,
            borderWidth: 0,
            floating: true,
            labelFormatter: function() {
              return formatSeriesLabel(this.name);
            },
            itemStyle: {
              cursor: 'pointer',
              color: '#1a1a1a'
            },
            itemHoverStyle: {
              color: '#111'
            }
          },
          credits: {
            enabled: false
          }
        });
        destroy = new Element('div', {
          'class': 'action destroy',
          'styles': {
            opacity: 0
          },
          'events': {
            'click': function(event) {
              return that.el.fade('out').get('tween').chain(function() {
                return that.el.tween('height', '0').get('tween').chain(function() {
                  that.chart.destroy();
                  that.el.destroy();
                  that.model.collection.remove(that.model);
                  return that.model.destroy();
                });
              });
            }
          }
        });
        destroyPaper = Raphael(destroy, 26, 26);
        destroyPaper.path("M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z");
        move = new Element('div', {
          'class': 'action move',
          'styles': {
            opacity: 0,
            cursor: 'move'
          }
        });
        movePaper = Raphael(move, 26, 26);
        movePaper.path("M4.082,8.083v2.999h24.835V8.083H4.082zM4.082,24.306h22.835v-2.999H4.082V20.306zM4.082,17.694h22.835v-2.999H4.082V13.694z");
        element.grab(move, 'top');
        element.grab(destroy, 'top');
        element.tween('height', 376);
        element.addEvent('mouseenter', function() {
          return move.tween('opacity', 1);
        });
        element.addEvent('mouseleave', function() {
          return move.tween('opacity', 0);
        });
        element.addEvent('mouseenter', function() {
          return destroy.tween('opacity', 1);
        });
        element.addEvent('mouseleave', function() {
          return destroy.tween('opacity', 0);
        });
        return element;
      }
    });
    GraphCollectionView = Backbone.View.extend({
      tagName: 'div',
      className: 'graph',
      views: [],
      initialize: function() {
        var element, that;
        that = this;
        element = that.el;
        return that.sortable = new Sortables(element, {
          handle: 'div.action.move',
          opacity: 0.3,
          clone: true,
          revert: {
            duration: 500,
            transition: 'back:out'
          }
        });
      },
      render: function() {
        var that;
        that = this;
        that.collection.each(function(model) {
          var graph, view;
          if (!model.get('rendered')) {
            view = new GraphView({
              model: model
            });
            that.views.include(view);
            graph = view.render();
            that.el.grab(graph);
            model.set('rendered', true);
            return that.sortable.addItems(view.el);
          }
        });
        return that;
      }
    });
    TimeframeView = Backbone.View.extend({
      tagName: 'li',
      className: 'timeframe',
      render: function() {
        var that;
        that = this;
        that.el.set('html', this.model.get('label'));
        that.el.addEvent('click', function() {
          var attrs, label;
          label = $('timeframe-label');
          label.set('html', that.model.get('label'));
          $('timeframes').fade('out');
          that.el.getParent('ul').getElements('li').each(function(el) {
            return el.removeClass('selected');
          });
          that.el.toggleClass('selected');
          attrs = that.model.toTimeAttributes();
          Cookie.write('timeframe', JSON.encode(attrs));
          return graphs.models.each(function(graph) {
            graph.set(attrs);
            return graph.fetch({
              success: function(model, response) {
                return graphsView.views.each(function(view) {
                  view.model.get('series').each(function(series, index) {
                    return view.chart.series[index].setData(series.data, false);
                  });
                  return view.chart.redraw();
                });
              }
            });
          });
        });
        return that;
      }
    });
    TimeframeCollectionView = Backbone.View.extend({
      tagName: 'ul',
      className: 'timeframe',
      initialize: function() {
        var icon, paper, that, toggler;
        that = this;
        icon = new Element('div', {
          "class": 'icon'
        });
        paper = Raphael(icon, 32, 32);
        paper.path("M10.666,18.292c0.275,0.479,0.889,0.644,1.365,0.367l3.305-1.677C15.39,16.99,15.444,17,15.501,17c0.828,0,1.5-0.671,1.5-1.5l-0.5-7.876c0-0.552-0.448-1-1-1c-0.552,0-1,0.448-1,1l-0.466,7.343l-3.004,1.96C10.553,17.204,10.389,17.816,10.666,18.292zM12.062,9.545c0.479-0.276,0.642-0.888,0.366-1.366c-0.276-0.478-0.888-0.642-1.366-0.366s-0.642,0.888-0.366,1.366C10.973,9.658,11.584,9.822,12.062,9.545zM8.179,18.572c-0.478,0.277-0.642,0.889-0.365,1.367c0.275,0.479,0.889,0.641,1.365,0.365c0.479-0.275,0.643-0.888,0.367-1.367C9.27,18.461,8.658,18.297,8.179,18.572zM9.18,10.696c-0.479-0.276-1.09-0.112-1.366,0.366s-0.111,1.09,0.365,1.366c0.479,0.276,1.09,0.113,1.367-0.366C9.821,11.584,9.657,10.973,9.18,10.696zM6.624,15.5c0,0.553,0.449,1,1,1c0.552,0,1-0.447,1.001-1c-0.001-0.552-0.448-0.999-1.001-1C7.071,14.5,6.624,14.948,6.624,15.5zM14.501,23.377c0,0.553,0.448,1,1,1c0.552,0,1-0.447,1-1s-0.448-1-1-1C14.949,22.377,14.501,22.824,14.501,23.377zM10.696,21.822c-0.275,0.479-0.111,1.09,0.366,1.365c0.478,0.276,1.091,0.11,1.365-0.365c0.277-0.479,0.113-1.09-0.365-1.367C11.584,21.18,10.973,21.344,10.696,21.822zM21.822,10.696c-0.479,0.278-0.643,0.89-0.366,1.367s0.888,0.642,1.366,0.365c0.478-0.275,0.643-0.888,0.365-1.366C22.913,10.584,22.298,10.42,21.822,10.696zM21.456,18.938c-0.274,0.479-0.112,1.092,0.367,1.367c0.477,0.274,1.089,0.112,1.364-0.365c0.276-0.479,0.112-1.092-0.364-1.367C22.343,18.297,21.73,18.461,21.456,18.938zM24.378,15.5c0-0.551-0.448-1-1-1c-0.554,0.002-1.001,0.45-1.001,1c0.001,0.552,0.448,1,1.001,1C23.93,16.5,24.378,16.053,24.378,15.5zM18.573,22.822c0.274,0.477,0.888,0.643,1.366,0.365c0.478-0.275,0.642-0.89,0.365-1.365c-0.277-0.479-0.888-0.643-1.365-0.367C18.46,21.732,18.296,22.344,18.573,22.822zM18.939,9.546c0.477,0.276,1.088,0.112,1.365-0.366c0.276-0.478,0.113-1.091-0.367-1.367c-0.477-0.276-1.09-0.111-1.364,0.366C18.298,8.659,18.462,9.27,18.939,9.546zM28.703,14.364C28.074,7.072,21.654,1.67,14.364,2.295c-3.254,0.281-6.118,1.726-8.25,3.877L4.341,4.681l-1.309,7.364l7.031-2.548L8.427,8.12c1.627-1.567,3.767-2.621,6.194-2.833c5.64-0.477,10.595,3.694,11.089,9.335c0.477,5.64-3.693,10.595-9.333,11.09c-5.643,0.476-10.599-3.694-11.092-9.333c-0.102-1.204,0.019-2.373,0.31-3.478l-3.27,1.186c-0.089,0.832-0.106,1.684-0.031,2.55c0.629,7.29,7.048,12.691,14.341,12.066C23.926,28.074,29.328,21.655,28.703,14.364z");
        toggler = $('timeframe-toggler');
        toggler.grab(icon, 'top');
        return toggler.addEvent('click', function() {
          return timeframesView.el.fade('toggle');
        });
      },
      render: function() {
        var that;
        that = this;
        that.el.empty();
        return that.collection.each(function(model) {
          var view;
          view = new TimeframeView({
            model: model
          });
          return that.el.grab(view.render().el);
        });
      }
    });
    hostsContainer = $('hosts');
    hosts = new HostCollection;
    hostsView = new DimensionCollectionView({
      collection: hosts,
      container: hostsContainer
    });
    hosts.fetch({
      success: function(collection) {
        var list;
        list = hostsView.render().el;
        return hostsContainer.grab(list);
      }
    });
    metricsContainer = $('metrics');
    metrics = new MetricCollection;
    metricsView = new DimensionCollectionView({
      collection: metrics,
      container: metricsContainer
    });
    metrics.fetch({
      success: function(collection) {
        var list;
        list = metricsView.render().el;
        return metricsContainer.grab(list);
      }
    });
    graphsContainer = $('graphs');
    graphs = new GraphCollection;
    graphsView = new GraphCollectionView({
      el: graphsContainer,
      collection: graphs
    });
    button = new Element('input', {
      'type': 'button',
      'value': 'Show graphs',
      'class': 'button',
      'styles': {
        'font-size': '80%',
        'padding': '4px 8px'
      },
      'events': {
        'click': function(event) {
          var selected_hosts, selected_plugins;
          selected_plugins = metrics.selected().map(function(metric) {
            return metric.get('id').split('/')[0];
          }).unique();
          selected_hosts = hosts.selected().map(function(host) {
            return host.get('id');
          }).unique();
          return selected_hosts.each(function(host) {
            var builder;
            selected_plugins.each(function(plugin) {
              var attributes, graph, timeframe;
              attributes = {
                host: host,
                plugin: plugin
              };
              timeframe = JSON.decode(Cookie.read('timeframe'));
              attributes = Object.merge(attributes, timeframe);
              graph = new Graph(attributes);
              return graph.fetch({
                success: function(model, response) {
                  graphs.add(graph);
                  return graphsView.render().el;
                }
              });
            });
            builder = $('builder');
            return builder.tween('padding-top', 24).get('tween').chain(function() {
              return builder.setStyle('border-top', '1px dotted #aaa');
            });
          });
        }
      }
    });
    $('display').grab(button);
    timeframes = new TimeframeCollection;
    timeframes.add([
      {
        label: 'last 1 hour',
        start: -1,
        unit: 'hours'
      }, {
        label: 'last 2 hours',
        start: -2,
        unit: 'hours'
      }, {
        label: 'last 6 hours',
        start: -6,
        unit: 'hours'
      }, {
        label: 'last 12 hours',
        start: -12,
        unit: 'hours'
      }, {
        label: 'last 24 hours',
        start: -24,
        unit: 'hours'
      }, {
        label: 'last 3 days',
        start: -72,
        unit: 'hours'
      }, {
        label: 'last 7 days',
        start: -168,
        unit: 'hours'
      }, {
        label: 'last 2 weeks',
        start: -336,
        unit: 'hours'
      }, {
        label: 'last 1 month',
        start: -774,
        unit: 'hours'
      }, {
        label: 'last 3 months',
        start: -2322,
        unit: 'hours'
      }, {
        label: 'last 6 months',
        start: -4368,
        unit: 'hours'
      }, {
        label: 'last 1 year',
        start: -8760,
        unit: 'hours'
      }, {
        label: 'last 2 years',
        start: -17520,
        unit: 'hours'
      }, {
        label: 'current month',
        start: 0,
        finish: 1,
        unit: 'months'
      }, {
        label: 'previous month',
        start: -1,
        finish: 0,
        unit: 'months'
      }, {
        label: 'two months ago',
        start: -2,
        finish: -1,
        unit: 'months'
      }, {
        label: 'three months ago',
        start: -3,
        finish: -2,
        unit: 'months'
      }
    ]);
    timeframesView = new TimeframeCollectionView({
      collection: timeframes,
      el: $('timeframes')
    });
    return timeframesView.render();
  });

}).call(this);

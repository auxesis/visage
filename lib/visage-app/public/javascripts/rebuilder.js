// Generated by CoffeeScript 1.3.3
(function() {

  window.addEvent('domready', function() {
    var BuildDimensionSelector, Host, HostCollection, Metric, MetricCollection, hosts, metrics;
    BuildDimensionSelector = function(name, element, dimensions) {
      var container;
      container = $(element);
      return dimensions.each(function(dimension) {
        var checkbox, id, label, li;
        id = dimension.id;
        li = new Element('li', {
          'class': "" + name + " row",
          'events': {
            'click': function(event) {
              var checkbox;
              checkbox = event.target.getElement('input.checkbox');
              if (checkbox) {
                return checkbox.checked = !checkbox.checked;
              }
            }
          }
        });
        checkbox = new Element('input', {
          'type': 'checkbox',
          'name': id,
          'id': id,
          'class': "" + name + " checkbox"
        });
        label = new Element('label', {
          'for': id,
          'html': id,
          'class': "" + name + " label"
        });
        li.grab(checkbox);
        li.grab(label);
        return container.grab(li);
      });
    };
    Host = Backbone.Model.extend({
      hostname: function() {
        return this.get('fqdn').split('.')[0];
      }
    });
    HostCollection = Backbone.Collection.extend({
      url: '/data',
      model: Host,
      parse: function(response) {
        var attrs;
        return attrs = response.hosts.map(function(host) {
          return {
            id: host
          };
        });
      }
    });
    hosts = new HostCollection;
    hosts.on('reset', function(hosts) {
      return BuildDimensionSelector('host', $('hosts'), hosts);
    });
    hosts.fetch();
    Metric = Backbone.Model.extend({
      plugin: function() {
        return this.get('id').split('/')[0];
      },
      instance: function() {
        return this.get('id').split('/')[1];
      }
    });
    MetricCollection = Backbone.Collection.extend({
      url: '/data/*',
      model: Metric,
      parse: function(response) {
        var attrs;
        attrs = response.metrics.map(function(metric) {
          return {
            id: metric
          };
        });
        return _.sortBy(attrs, function(attr) {
          return attr.id;
        });
      }
    });
    metrics = new MetricCollection;
    metrics.on('reset', function(metrics) {
      return BuildDimensionSelector('metric', $('metrics'), metrics);
    });
    return metrics.fetch();
  });

}).call(this);
